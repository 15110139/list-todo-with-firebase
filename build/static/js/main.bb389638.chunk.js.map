{"version":3,"sources":["components/Item/Index.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeTask","id","updateCheckTask","forceUpdate","editText","setState","edit","state","onChangeInput","e","defineProperty","target","name","value","saveEdit","contentEdit","updateContenTask","el","content","_this2","_this$state","_this$props","index","react_default","a","createElement","className","check","type","onChange","onBlur","autoFocus","reactstrap_es","onClick","size","color","PureComponent","init","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","uuidv4","require","App","listToDo","findIndex","splice","ref","set","addNewTask","valueInput","list","unshift","updateContentTask","newContent","_renderList","map","Index","key","firebaseInit","once","then","data","val","placeholder","outline","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb389638.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Button } from \"reactstrap\";\nclass Item extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false,\n      contentEdit: this.props.el ? this.props.el.content : \"\"\n    };\n  }\n\n  removeTask = id => {\n    this.props.removeTask(id);\n  };\n  updateCheckTask = id => {\n    this.props.updateCheckTask(id);\n    this.forceUpdate();\n  };\n  editText = () => {\n    this.setState({\n      edit: !this.state.edit\n    });\n    this.forceUpdate();\n  };\n\n  onChangeInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  saveEdit = id => {\n    if (this.state.contentEdit !== \"\") {\n      this.props.updateContenTask(id, this.state.contentEdit);\n    }\n    this.setState({\n      edit: !this.state.edit\n    });\n    this.forceUpdate();\n  };\n  render() {\n    const { edit, contentEdit } = this.state;\n    const { el, index } = this.props;\n    return (\n      <div\n        className={\n          el.check\n            ? \"col-lg-6 m-auto alert alert-success border\"\n            : \"col-lg-6 m-auto alert alert-light border\"\n        }\n        index={index}\n      >\n        <div className=\"row\">\n          {edit ? (\n            <input\n              type=\"text\"\n              value={contentEdit}\n              name=\"contentEdit\"\n              onChange={this.onChangeInput}\n              onBlur={() => this.saveEdit(el.id)}\n              autoFocus\n            />\n          ) : (\n            <div>\n              <p>{el.content}</p>\n            </div>\n          )}\n        </div>\n        <div className=\"d-flex justify-content-end\">\n          {!edit && (\n            <Button onClick={this.editText} size=\"sm\" color=\"secondary\">\n              <i className=\"fas fa-edit\" />\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              this.updateCheckTask(el.id);\n            }}\n            size=\"sm\"\n            color=\"primary\"\n          >\n            {el.check ? (\n              <i className=\"fas fa-redo-alt\" />\n            ) : (\n              <i className=\"fas fa-check\" />\n            )}\n          </Button>\n          <Button\n            onClick={() => {\n              this.removeTask(el.id);\n            }}\n            size=\"sm\"\n            color=\"danger\"\n          >\n            <i className=\"fas fa-times\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Item;\n","\n// init fire base\nimport * as firebase from \"firebase\";\n\nexport const init = () => {\n  let config = {\n    apiKey: \"AIzaSyA297dSPusnVu2muDVSYM0qIAcKqmBbHks\",\n    authDomain: \"list-todo-with-firebase.firebaseapp.com\",\n    databaseURL: \"https://list-todo-with-firebase.firebaseio.com\",\n    projectId: \"list-todo-with-firebase\",\n    storageBucket: \"list-todo-with-firebase.appspot.com\",\n    messagingSenderId: \"914920011182\"\n  };\n  firebase.initializeApp(config);\n  return firebase.database();\n};\n","import React, { PureComponent } from \"react\";\nimport { Button, Input } from \"reactstrap\";\nimport Item from \"./components/Item/Index\";\nimport { init as firebaseInit } from \"./firebase\";\nconst uuidv4 = require(\"uuid/v4\");\nclass App extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      listToDo: [],\n      valueInput: \"\"\n    };\n    this.firebase = firebaseInit();\n    this.firebase\n      .ref(\"listToDo\")\n      .once(\"value\")\n      .then(data => {\n        this.setState({\n          listToDo: data.val() ? data.val() : []\n        });\n      });\n  }\n  // sữ lí sữ kiện khi ô input có sữ thây đổi.\n  onChangeInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // sữ lí sự kiện xóa 1 task\n  removeTask = id => {\n    var listToDo = this.state.listToDo;\n    // xóa phần tử trong list task hiện tại\n    const index = listToDo.findIndex(el => el.id === id);\n    listToDo.splice(index, 1);\n    this.setState({\n      listToDo: listToDo\n    });\n    // update dữ liệu lên firebase\n    this.firebase.ref(`listToDo`).set(listToDo);\n    this.forceUpdate();\n  };\n  addNewTask = () => {\n    const { listToDo, valueInput } = this.state;\n    let list = listToDo;\n    // thêm task mới vào list task\n    list.unshift({ id: uuidv4(), content: valueInput, check: false });\n    // update dữ liệu lên firebase\n\n    this.firebase.ref(`listToDo`).set(list);\n    // rest lai ô input\n    this.setState({\n      listToDo: list,\n      valueInput: \"\"\n    });\n    this.forceUpdate();\n  };\n\n  updateCheckTask = id => {\n    var listToDo = this.state.listToDo;\n    // update thông tin task được chọn\n    const index = listToDo.findIndex(el => el.id === id);\n    listToDo[index].check = !listToDo[index].check;\n    this.setState({\n      listToDo: listToDo\n    });\n    this.forceUpdate();\n    // update dữ liệu lên firebase\n    this.firebase.ref(`listToDo`).set(listToDo);\n  };\n\n  updateContentTask = (id, newContent) => {\n    var listToDo = this.state.listToDo;\n    const index = listToDo.findIndex(el => el.id === id);\n    listToDo[index].content = newContent;\n    this.setState({\n      listToDo: listToDo\n    });\n    this.forceUpdate();\n    this.firebase.ref(`listToDo`).set(listToDo);\n  };\n\n  // show list task\n  _renderList = () => {\n    return this.state.listToDo.map((el, index) => (\n      <Item\n        key={index}\n        updateCheckTask={this.updateCheckTask}\n        removeTask={this.removeTask}\n        updateContenTask={this.updateContentTask}\n        el={el}\n        index={index}\n      />\n    ));\n  };\n\n  // render giao diện list to do\n  render() {\n    const { valueInput } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <h1>ToDo App</h1>\n          <div className=\"d-inline-flex\">\n            {/* ô input */}\n            <Input\n              value={valueInput}\n              name=\"valueInput\"\n              onChange={this.onChangeInput}\n              placeholder=\"Enter name task\"\n            />\n            {/* button thêm task */}\n            <Button\n              outline\n              color=\"secondary\"\n              disabled={!valueInput ? true : false}\n              onClick={this.addNewTask}\n            >\n              <i className=\"fas fa-plus\" /> Add Task\n            </Button>\n          </div>\n        </div>\n\n        <hr />\n        {/* render list task */}\n        {this._renderList()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}